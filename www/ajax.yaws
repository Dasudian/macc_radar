<erl>
-compile(export_all).

out(A) ->
    Peer = case yaws_api:get_sslsocket(A#arg.clisock) of
               {ok, SslSocket} ->
                   ssl:peername(SslSocket);
               _ ->
                   inet:peername(A#arg.clisock)
           end,

    {ok,{IP,_}} = Peer,
    A2=A#arg{state = [{ip, IP}]},
    yaws_rpc:handler_session(A2, {?MODULE, callback}).
	
callback([{ip, IP}] = _State, {call, forecasts, Value} = _Request, Session) ->
	io:format("~p~n",[Value]),
	{array,[{struct,[{"time", Time},{"roads", {array, Roads}}]}]} = Value,
	LinkIds = lists:flatten(lists:map(fun(Road) -> modum_proxy:get_links_of_type(Road) end,Roads)),
	F = fun(LinkId) ->
		LinkId ! {get_density, list_to_integer(Time), discrete, self()},
		Data = 
			receive
				{density, LinkId, {Coordinates,Density}} -> 
					[[[L1,L2] || {L1,L2} <- Coordinates],Density]					
			after 5000 -> io:format("Did not receive density for link ~w!~n", [LinkId]), undefined
			end,
		Data
	end,
	Densities = lists:map(F, LinkIds),
	{true, 0, Session, {response, {array, Densities}}};
callback([{ip, IP}] = _State, {call, kill_simulation, _Value} = _Request, Session) ->
	[supervisor:terminate_child(vehicle_holon_sv, Child) || {_, Child,_,_} <- supervisor:which_children(vehicle_holon_sv)],
	{true, 0, Session, {response,  "Simulation ended." }}.
</erl>